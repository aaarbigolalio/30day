name: Windows RDP via Ngrok (Self-hosted)
on: 
  push:
  workflow_dispatch:
  
jobs:
  rdp-setup:
    runs-on: self-hosted
    timeout-minutes: 43200  # 30 ŸäŸàŸÖ
    
    steps:
    - name: Download and extract Ngrok
      run: |
        if (-not (Test-Path "ngrok.exe")) {
          Write-Output "üì• Downloading Ngrok..."
          Invoke-WebRequest "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-windows-amd64.zip" -OutFile ngrok.zip
          Expand-Archive ngrok.zip -DestinationPath "$env:USERPROFILE"
          Remove-Item ngrok.zip
          Copy-Item "$env:USERPROFILE\ngrok.exe" "$env:GITHUB_WORKSPACE"
          Write-Output "‚úÖ Ngrok downloaded"
        }
        
    - name: Authenticate Ngrok
      run: |
        Write-Output "üîê Authenticating Ngrok..."
        .\ngrok.exe authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
        Write-Output "‚úÖ Authentication successful"
        
    - name: Enable RDP and Firewall
      run: |
        Write-Output "üîß Configuring RDP..."
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        New-NetFirewallRule -DisplayName "Allow RDP via Ngrok" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3389 -ErrorAction SilentlyContinue
        Write-Output "‚úÖ RDP configured"
        
    - name: Create Admin User
      run: |
        Write-Output "üë§ Creating user..."
        $userExists = Get-LocalUser -Name "kamel007" -ErrorAction SilentlyContinue
        if ($userExists) {
          net user kamel007 Kamel@123
          Write-Output "‚úÖ User updated"
        } else {
          net user kamel007 Kamel@123 /add
          net localgroup administrators kamel007 /add
          Write-Output "‚úÖ User created"
        }
        
    - name: Start Ngrok Tunnel
      run: |
        Write-Output "üöÄ Starting Ngrok tunnel..."
        
        Get-Process -Name "ngrok" -ErrorAction SilentlyContinue | Stop-Process -Force
        Start-Sleep -Seconds 3
        
        $ngrokProcess = Start-Process -FilePath "$pwd\ngrok.exe" -ArgumentList "tcp 3389 --log=stdout" -NoNewWindow -PassThru -RedirectStandardOutput ngrok.log
        
        Write-Output "‚è≥ Waiting for tunnel..."
        $tunnelUrl = $null
        $timeout = 60
        
        while ($timeout -gt 0 -and -not $tunnelUrl) {
          Start-Sleep -Seconds 5
          $timeout -= 5
          
          try {
            $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -ErrorAction Stop
            if ($response.tunnels -and $response.tunnels.Length -gt 0) {
              $tunnelUrl = $response.tunnels[0].public_url -replace "tcp://", ""
            }
          } catch {
            if (Test-Path "ngrok.log") {
              $logContent = Get-Content ngrok.log -ErrorAction SilentlyContinue
              $tunnelMatch = $logContent | Select-String -Pattern "tcp://([a-zA-Z0-9\.\-]+:\d+)"
              if ($tunnelMatch) {
                $tunnelUrl = $tunnelMatch.Matches.Groups[1].Value
              }
            }
          }
        }
        
        if (-not $tunnelUrl) {
          Write-Output "::error::‚ùå Failed to establish tunnel"
          exit 1
        }
        
        Write-Output ""
        Write-Output "üéâ============================================üéâ"
        Write-Output "||        ‚úÖ RDP CONNECTION READY          ||"
        Write-Output "=============================================="
        Write-Output "üìç Address: $tunnelUrl"  
        Write-Output "üë§ Username: kamel007"
        Write-Output "üîë Password: Kamel@123"
        Write-Output "‚è∞ Started: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        Write-Output "‚è≥ Max Runtime: 30 days (43200 minutes)"
        Write-Output "----------------------------------------------"
        Write-Output "üìã Connection Instructions:"
        Write-Output "1. Press Win + R, type 'mstsc' and press Enter"
        Write-Output "2. Enter Computer: $tunnelUrl"
        Write-Output "3. Enter the credentials above"
        Write-Output "4. Click 'Connect' and enjoy!"
        Write-Output "=============================================="
        Write-Output ""
        
        Write-Output "üíª System Information:"
        Write-Output "OS: $(Get-CimInstance Win32_OperatingSystem | Select-Object -ExpandProperty Caption)"
        Write-Output "CPU: $(Get-CimInstance Win32_Processor | Select-Object -ExpandProperty Name)"
        Write-Output "RAM: $([math]::Round((Get-CimInstance Win32_ComputerSystem).TotalPhysicalMemory/1GB, 2)) GB"
        Write-Output ""
        
        Write-Output "üîÑ RDP Server running indefinitely..."
        Write-Output "üí° This self-hosted runner can stay active for up to 30 days!"
        
        $loopCount = 0
        while ($true) { 
          Start-Sleep -Seconds 1800
          $loopCount++
          $uptime = New-TimeSpan -Start (Get-Date).AddSeconds(-($loopCount * 1800))
          Write-Output "‚è∞ Uptime: $($uptime.Days)d $($uptime.Hours)h $($uptime.Minutes)m - Still active!"
          
          try {
            $healthCheck = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -ErrorAction Stop
            if (-not $healthCheck.tunnels -or $healthCheck.tunnels.Length -eq 0) {
              Write-Output "‚ö†Ô∏è Warning: Tunnel disconnected, checking..."
            }
          } catch {
            Write-Output "‚ö†Ô∏è Warning: API check failed, continuing..."
          }
        }
        
    - name: Cleanup
      if: always()
      run: |
        Write-Output "üßπ Cleaning up..."
        Get-Process -Name "ngrok" -ErrorAction SilentlyContinue | Stop-Process -Force
        if (Test-Path "ngrok.log") {
          Remove-Item "ngrok.log" -Force -ErrorAction SilentlyContinue
        }
        Write-Output "‚úÖ Cleanup completed"
